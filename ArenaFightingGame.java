/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package arenaFightingGame;
import java.util.Random;

/**
 *
 * @author Shane Bishop
 */
public class ArenaFightingGame extends javax.swing.JFrame {
    private int levelNumber;    
    private int maxPlayerHP;
    private int playerHP;
    private int monsterHP;
    private int numberOfPotions;
    private int playerAttPts;
    private int playerDefPts;
    private int exp;
    private int monsterAttPts;
    private int monsterDefPts;
    
    /**
     * Creates new form ArenaFightingGame
     */
    public ArenaFightingGame() {
        initComponents();
        prepareFirstLevel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        instructions1Label = new javax.swing.JLabel();
        instructions2Label = new javax.swing.JLabel();
        playerHPHeadingLabel = new javax.swing.JLabel();
        monsterHPHeadingLabel = new javax.swing.JLabel();
        playerHPLabel = new javax.swing.JLabel();
        monsterHPLabel = new javax.swing.JLabel();
        attackButton = new javax.swing.JButton();
        potionButton = new javax.swing.JButton();
        levelNumberLabel = new javax.swing.JLabel();
        resultsPane = new javax.swing.JScrollPane();
        resultsArea = new javax.swing.JTextArea();
        potionsLabel = new javax.swing.JLabel();
        numPotionsLabel = new javax.swing.JLabel();
        monsterIconLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Arena Fighting Game");

        instructions1Label.setText("This is an arena fighting game, where the player fights monsters.");

        instructions2Label.setText("The only controls are to use a potion or to attack.");

        playerHPHeadingLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        playerHPHeadingLabel.setText("Player HP");

        monsterHPHeadingLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        monsterHPHeadingLabel.setText("Monster HP");

        playerHPLabel.setText("--");

        monsterHPLabel.setText("--");

        attackButton.setText("Attack!");
        attackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attackButtonActionPerformed(evt);
            }
        });

        potionButton.setText("Use Potion");
        potionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                potionButtonActionPerformed(evt);
            }
        });

        levelNumberLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        levelNumberLabel.setText("Level #0");

        resultsArea.setEditable(false);
        resultsArea.setColumns(20);
        resultsArea.setRows(5);
        resultsArea.setText("Do you wish to attack or use a potion?");
        resultsPane.setViewportView(resultsArea);

        potionsLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        potionsLabel.setText("Potions Remaining:");

        numPotionsLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        numPotionsLabel.setText("--");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultsPane)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(instructions1Label)
                            .addComponent(instructions2Label)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(playerHPHeadingLabel)
                                    .addComponent(playerHPLabel))
                                .addGap(106, 106, 106)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(monsterHPLabel)
                                    .addComponent(monsterHPHeadingLabel)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(monsterIconLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(potionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(levelNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(potionsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numPotionsLabel))
                            .addComponent(attackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(instructions1Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(instructions2Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(levelNumberLabel)
                    .addComponent(potionsLabel)
                    .addComponent(numPotionsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerHPHeadingLabel)
                    .addComponent(monsterHPHeadingLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerHPLabel)
                    .addComponent(monsterHPLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(monsterIconLabel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(attackButton)
                        .addComponent(potionButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultsPane, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void attackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attackButtonActionPerformed
        Random r = new Random(); //used for player's attack damage and exp>=100
        
        if (playerHP <= 0) return; //player is dead
        
        if (levelNumber == 10) return; //player won game
        
        //determine player's attack damage and subtract from monsterHP
        int playerAttackDamage = playerAttPts - monsterDefPts + r.nextInt(3);
        playerAttackDamage++;
        monsterHP = monsterHP - playerAttackDamage;
        monsterHPLabel.setText("" + monsterHP);
        resultsArea.setText(resultsArea.getText() + "\nPlayer caused monster to "
                + "lose " + playerAttackDamage + " HP.");
        
        //if monsterHP <= 0, prepare new level and give player EXP
        if (monsterHP <= 0) {
            if (levelNumber == 10) { //player has won
                resultsArea.setText(resultsArea.getText() + "\nYOU WIN!");
                return;
            }
            
            int expRandomizer = r.nextInt(7);
            expRandomizer++;
            int expGainedThisLevel;
            expGainedThisLevel = (Math.round((monsterAttPts + monsterHP + monsterDefPts)/3))*expRandomizer;
            exp = exp + expGainedThisLevel;
            
            resultsArea.setText(resultsArea.getText() + "\nPlayer defeated "
                    + "monster!\nPlayer gained " + expGainedThisLevel + 
                    " experience points!");
            
            if (exp >= 200) { //level up (increase stats)
                exp = 0; //reset experience points to 0
                expGainedThisLevel = 0; //reset to 0 just in case
                maxPlayerHP = maxPlayerHP + r.nextInt(5);
                playerAttPts = playerAttPts + r.nextInt(5);
                playerDefPts = playerDefPts + r.nextInt(5);
                resultsArea.setText(resultsArea.getText() + "\nPlayer levelled up!");
            }
            
            prepareNewLevel(); //moved to a better place
            
            resultsArea.setText(resultsArea.getText() + "\nCurrent EXP is " + 
                    exp + ".\nWelcome to level " + levelNumber + ".\nDo you "
                    + "wish to attack or use a potion?");
        }
        else {
            //determine monster's attack damage and subtract from playerHP
            int monsterAttackDamage = monsterAttackDamage();
            playerHP = playerHP - monsterAttackDamage;
            playerHPLabel.setText("" + playerHP);
            resultsArea.setText(resultsArea.getText() + "\nMonster caused player to "
                    + "lose " + monsterAttackDamage + " HP.\nDo you wish to "
                    + "attack or use a potion?");

            //if playerHP <= 0, game over (do not execute any further code)
            if (playerHP <= 0) {
                playerHPLabel.setText("0");
                resultsArea.setText(resultsArea.getText() + "\nGAME OVER!");
            }
        }
    }//GEN-LAST:event_attackButtonActionPerformed

    private void potionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_potionButtonActionPerformed
        if (playerHP <= 0) return; //player is dead
        
        if (levelNumber == 10) return; //player won game
        
        //only allow user to heal when they have more than 0 potions
        if (numberOfPotions > 0) {
            if (playerHP < maxPlayerHP) {
                //subtract 1 from numberOfPotions
                numberOfPotions = numberOfPotions - 1;
                numPotionsLabel.setText("" + numberOfPotions);
                
                //add 40 to playerHP (do not exceed maximum HP)
                int difference = maxPlayerHP - playerHP;
                if (difference < 40) {
                    playerHP = playerHP + difference;
                    playerHPLabel.setText("" + playerHP);
                    resultsArea.setText(resultsArea.getText() + "\nPlayer "
                            + "regained " + difference + "HP!");
                }
                else {
                    playerHP = playerHP + 40;
                    playerHPLabel.setText("" + playerHP);
                    resultsArea.setText(resultsArea.getText() + "\nPlayer "
                            + "regained 40 HP!");
                }
                
                //determine monster's attack damage and subtract from playerHP
                int monsterAttackDamage = monsterAttackDamage();
                playerHP = playerHP - monsterAttackDamage;
                playerHPLabel.setText("" + playerHP);
                resultsArea.setText(resultsArea.getText() + "\nMonster caused "
                        + "player to lose " + monsterAttackDamage + " HP.\nDo "
                        + "you wish to attack or use a potion?");
                
                //if playerHP <= 0, game over (do not execute any further code)
                if (playerHP <= 0) {
                    playerHPLabel.setText("0");
                    resultsArea.setText(resultsArea.getText() + "\nGAME OVER!");
                }
            }
            else {
                resultsArea.setText(resultsArea.getText() + "\nYou cannot use a "
                        + "potion right now. Please attack instead.");
            }
        }
        else {
            resultsArea.setText(resultsArea.getText() + "\nYou cannot use a "
                        + "potion right now. Please attack instead.");
        }
    }//GEN-LAST:event_potionButtonActionPerformed

    /*
     * determines the amount of damage the monster will cause to the player
     */
    private int monsterAttackDamage() {
        Random r = new Random(); //used to determine monster's attack damage
        int monsterAttackDamage = playerAttPts - monsterDefPts + r.nextInt(2);
        monsterAttackDamage++;
        return monsterAttackDamage;
    }
    
    /*
     * prepares first level, such as intial stats of player and monster, and 
     * takes care of any other details that need to be taken care of (at time of
     * writing this, what this method was doing was not entirely planned yet)
    */
    public void prepareFirstLevel() {
        //set field variables as necessary
        levelNumber = 1;
        maxPlayerHP = 100;
        playerHP = maxPlayerHP;
        monsterHP = 20;
        numberOfPotions = 10;
        
        //set player's initial stats
        playerAttPts = 15;
        playerDefPts = 8;
        exp = 0;
        
        //set monster's initial stats
        monsterAttPts = 9;
        monsterDefPts = 6;
        
        //set values in GUI
        levelNumberLabel.setText("Level #" + levelNumber);
        numPotionsLabel.setText("" + numberOfPotions);
        playerHPLabel.setText("" + playerHP);
        monsterHPLabel.setText("" + monsterHP);
    }
    
    /*
     * prepares new level if monsterHP <= 0, updating level number and 
     * monster's stats
    */
    private void prepareNewLevel() {
        Random r = new Random(); //used to determine health, att, def, speed
        
        //increment levelNumber by 1
        levelNumber++;
        levelNumberLabel.setText("Level #" + levelNumber);
        
        //determine new monster's stats
        monsterHP = r.nextInt(15);
        monsterHP = monsterHP + 20;
        monsterAttPts = r.nextInt(10);
        monsterAttPts = monsterAttPts + monsterAttPts%2;
        monsterDefPts = monsterAttPts%2 + r.nextInt(5);
        
        monsterHPLabel.setText("" + monsterHP);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ArenaFightingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ArenaFightingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ArenaFightingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ArenaFightingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ArenaFightingGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton attackButton;
    private javax.swing.JLabel instructions1Label;
    private javax.swing.JLabel instructions2Label;
    private javax.swing.JLabel levelNumberLabel;
    private javax.swing.JLabel monsterHPHeadingLabel;
    private javax.swing.JLabel monsterHPLabel;
    private javax.swing.JLabel monsterIconLabel;
    private javax.swing.JLabel numPotionsLabel;
    private javax.swing.JLabel playerHPHeadingLabel;
    private javax.swing.JLabel playerHPLabel;
    private javax.swing.JButton potionButton;
    private javax.swing.JLabel potionsLabel;
    private javax.swing.JTextArea resultsArea;
    private javax.swing.JScrollPane resultsPane;
    // End of variables declaration//GEN-END:variables
}
